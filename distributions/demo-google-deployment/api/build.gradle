import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage
import com.bmuschko.gradle.docker.tasks.image.Dockerfile

/*
 * Copyright 2018 The Data Transfer Project Authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Script to build and dockerize an API server using the Google cloud extension.
 *
 * <p>TODO(#202): Test deploying a prod image to GCP
 *
 * <p>TODO(@jimmarino): Automatically set cloudType=google so it is not needed on the commandline
 *
 * <ul>To run locally:
 *  <li>./gradlew clean -PcloudType=google -PgcpProject=<your-project-name> \
 *      :distributions:demo-google-deployment:api:dockerizeLocal
 *  <li>docker run --rm -p 8080:8080 -p 5005:5005 dataportability/api
 * </ul>
 *
 * <ul>To run for prod environments:
 *  <li>./gradlew clean -PcloudType=google -PgcpProject=<your-project-name> -Penv=<environment> \
 *  -PimageVersion=v0 :distributions:demo-google-deployment:api:dockerize
 *  <li>docker run --rm -p 8080:8080 dataportability/api
 *  <li>To push to Google Container Registry:
 *      <li>gcloud config set project <gcpProject>
 *      <li>gcloud docker -- push gcr.io/<gcpProject>/portability-api:<imageVersion>
 * </ul>
 *
 */

plugins {
    id 'com.github.johnrengelman.shadow' version '2.0.2'
    id 'com.bmuschko.docker-remote-api' version '3.2.6'
    id 'java'
    id 'application'
}

repositories {
    jcenter()
}

dependencies {
    compile project(':portability-api')
    compile project(':extensions:transport:portability-transport-jettyrest')
    compile project(':extensions:config:portability-config-yaml')
    // TODO: depend on these based on list in flag values.

    compile project(':extensions:auth:portability-auth-deezer')
    compile project(':extensions:auth:portability-auth-microsoft')
    compile project(':extensions:auth:portability-auth-google')
    compile project(':extensions:auth:portability-auth-flickr')
    compile project(':extensions:auth:portability-auth-rememberthemilk')
    compile project(':extensions:auth:portability-auth-instagram')
    compile project(':extensions:auth:portability-auth-smugmug')
    compile project(':extensions:auth:portability-auth-spotify')
    compile project(':extensions:auth:portability-auth-facebook')
    compile project(':extensions:auth:portability-auth-imgur')
}


addCloudExtensionDependency(project)

mainClassName = 'org.datatransferproject.api.ApiMain'

task copyIndexHtml(type: Copy) {
    description = 'Copies index.html into the jar'
    ext.env = project.hasProperty('env') ? env : 'local'
    into 'build/resources/main/static'
    from("../resources/config/environments/" + ext.env) {
        include 'index.html'
    }
}

task copyEnvConfig(type: Copy) {
    description = 'Copies environment-specific configuration into the jar'
    ext.env = project.hasProperty('env') ? env : 'local'
    into 'build/resources/main/config/env'
    from("../resources/config/environments/" + ext.env) {
        include 'api.yaml'
        include 'common.yaml'
    }
}

task copyConfig(type: Copy) {
    description = 'Copies configuration into the jar'
    into 'build/resources/main'
    from('../resources') {
        include 'config/api.yaml'
        include 'config/common.yaml'
    }
}

task copyResources(type: Copy) {
    description = 'Copies resources and configuration into the jar'
    dependsOn copyConfig, copyEnvConfig, copyIndexHtml
    into 'build/resources/main'
    from('../resources') {
        exclude { details -> details.file.name.contains('config') }
    }
}

shadowJar {
    mergeServiceFiles()
    exclude '**/pom.properties'
    exclude '**/pom.xml'
}

task createApiServerDockerfile(type: Dockerfile) {
    description = 'Builds the API Server Dockerfile'
    group = 'docker'
    destFile project.file("${buildDir}/api/Dockerfile")
    from "gcr.io/google-appengine/openjdk:8"
    exposePort 8080 // Port the API server is accessed from
    copyFile("build/libs/api-${project.version}-all.jar", "/app/api.jar")
    defaultCommand("java",
            "-Xrunjdwp:transport=dt_socket,server=y,suspend=n",
            "-jar",
            "/app/api.jar")

    // TODO: label with git commit
}

task dockerize(type: DockerBuildImage) {
    description = 'Builds the API Server Docker image'
    group = 'docker'
    dependsOn copyResources, shadowJar, createApiServerDockerfile
    dockerFile = project.file("${buildDir}/api/Dockerfile")
    inputDir = project.file(".")
    ext.gcpProject = project.hasProperty('gcpProject') ? gcpProject : 'missing-project-please-specify-one'
    ext.imageVersion = project.hasProperty('imageVersion') ? imageVersion : 'latest'
    tag = "gcr.io/" + ext.gcpProject + "/portability-api:" + ext.imageVersion
}

// Note: This service acct creds file should be used for local developmemt only. In production, we
// use GOOGLE_APPLICATION_CREDENTIALS which is stored as a Kubernetes secret. Hence this is only
// called from createApiServerDockerfileLocal and NOT the production createApiServerDockerfile.
task copyApiServerDepsLocal(type: Copy) {
    from '/tmp/service_acct_creds.json'
    into 'build/libs/'
}

task createApiServerDockerfileLocal(type: Dockerfile) {
    description = 'Builds the API Server Dockerfile for local development'
    group = 'docker'
    dependsOn copyApiServerDepsLocal
    destFile project.file("${buildDir}/api/Dockerfile")
    from "gcr.io/google-appengine/openjdk:8"
    exposePort 8080 // Port the API server is accessed from
    copyFile("build/libs/api-${project.version}-all.jar", "/app/api.jar")
    copyFile("build/libs/service_acct_creds.json", '/service_acct_creds.json')

    // Note: Debug port, project ID, and service_acct_creds.json set in the image are for local
    // only. This is not secure for an image deployed to production. In production,
    // GOOGLE_APPLICATION_CREDENTIALS is a Kubernetes secret, GOOGLE_PROJECT_ID is set in the
    // Kubernetes deployment (see distributions/common/k8s/api-deployment.yaml).
    // TODO: make debug flag driven
    exposePort 5005 // Port to open up for the debugger
    defaultCommand("java",
            "-Xdebug",
            "-Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=5005",
            "-jar",
            "/app/api.jar")
    ext.gcpProject = project.hasProperty('gcpProject') ? gcpProject : 'missing-project-please-specify-one'
    environmentVariable('GOOGLE_PROJECT_ID', ext.gcpProject)
    environmentVariable('GOOGLE_APPLICATION_CREDENTIALS', '/service_acct_creds.json')

    // TODO: label with git commit
}

task dockerizeLocal(type: DockerBuildImage) {
    description = 'Builds the API Server Docker image for local development'
    group = 'docker'
    dependsOn copyResources, shadowJar, createApiServerDockerfileLocal
    dockerFile = project.file("${buildDir}/api/Dockerfile")
    inputDir = project.file(".")
    tag = 'dataportability/api:latest'
}
