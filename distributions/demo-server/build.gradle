import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage
import com.bmuschko.gradle.docker.tasks.image.Dockerfile

import java.nio.file.Paths

/*
 * Copyright 2018 The Data Transfer Project Authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * This sub-project creates a single process runtime for demonstration purposes.
 *
 * <p>
 * To enable OAuth secrets for testing, edit your gradle.settings file in the data-transfer-project/.gradle directory (NOT the one in the source directory). Add the appropriate entries, e.g.:
 *
 * data.portability.key.microsoft=keyms
 * data.portability.secret.microsoft=secretms
 * data.portability.key.google=keygoogle
 * data.portability.secret.google=secretgoogle
 */

buildscript {
    dependencies {
        // this dependency is required as a workaround to a reification error thrown when using the Docker plugin with Java 9
        classpath('javax.activation:activation:1.1.1')
    }
}

plugins {
    id 'java'
    id 'application'
    id 'com.github.johnrengelman.shadow' version '2.0.2'
    id 'com.bmuschko.docker-remote-api' version '3.2.6'
}

repositories {
    jcenter()
}

def transportType = project.hasProperty('transportType') ? transportType : "jdk"
def derivedData = project.hasProperty('derivedData') ? derivedData : "false"
def demoDomain = project.hasProperty('appDomain') ? appDomain : "localhost"
def appPort = project.hasProperty('appPort') ? appPort : "3000"
def apiPort = project.hasProperty('apiPort') ? apiPort : "8080"


dependencies {

    compile project(':portability-bootstrap-vm')

    compile project(':portability-api')
    compile project(":extensions:transport:portability-transport-${transportType}")
    compile project(':portability-transfer')

    compile project(':extensions:config:portability-config-yaml')

    // TODO: depend on these based on list in flag values.
    compile project(':extensions:auth:portability-auth-flickr')
    compile project(':extensions:auth:portability-auth-google')
    compile project(':extensions:auth:portability-auth-instagram')
    compile project(':extensions:auth:portability-auth-microsoft')
    compile project(':extensions:auth:portability-auth-rememberthemilk')
    compile project(':extensions:auth:portability-auth-twitter')

    compile project(':extensions:data-transfer:portability-data-transfer-flickr')
    compile project(':extensions:data-transfer:portability-data-transfer-google')
    compile project(':extensions:data-transfer:portability-data-transfer-instagram')
    compile project(':extensions:data-transfer:portability-data-transfer-microsoft')
    compile project(':extensions:data-transfer:portability-data-transfer-rememberthemilk')

    compile project(':extensions:data-transfer:portability-data-transfer-twitter')

    if (derivedData == 'true') {
        compile project(':extensions:auth:portability-auth-derived-demo')
        compile project(':extensions:data-transfer:portability-data-transfer-derived-demo')
    }

}

addCloudExtensionDependency(project)

task createApiFile() {

    doLast {
        def apiFile = file("$buildDir/resources/main/config/api.yaml")
        apiFile.delete()
        apiFile.append("baseUrl: https://${demoDomain}:${appPort}\n")
        apiFile.append("baseApiUrl: https://${demoDomain}:${apiPort}")
    }
}

task createSecretsFile() {

    doLast {
        def propFile = file("$buildDir/resources/main/secrets.properties")
        propFile.delete()
        def secretsDirectory = Paths.get("$projectDir/../../.gradle/")
        println "secretsDirectory = [$secretsDirectory]"
        def secretsFileName = 'dataportability.secrets.properties'
        def secretsFile = file(secretsDirectory.resolve(secretsFileName))
        if (secretsFile.exists()) {
            copy {
                from file(secretsDirectory)
                include secretsFileName
                into file("$buildDir/resources/main")
                rename(secretsFileName, "secrets.properties")
            }
        } else {
            throw new GradleException("Configuration " + secretsFile + " not found")
        }
    }
}

mainClassName = 'org.dataportabilityproject.bootstrap.vm.SingleVMMain'

// TODO: refactor this to base build.gradle so other distros (like demo-google-deployment) may use
shadowJar {
    mergeServiceFiles()
    exclude '**/pom.properties'
    exclude '**/pom.xml'
}

shadowJar.dependsOn(createSecretsFile, createApiFile)

task createDemoServerDockerfile(type: Dockerfile) {
    description = 'Builds the Demo Server Dockerfile'
    group = 'docker'
    destFile project.file("${buildDir}/demoserver/Dockerfile")
    from "${javaDockerContainer}"
    // Port the API server is accessed from
    exposePort 8080
    // Port to open up for the debugger
    exposePort 5005
    copyFile("build/libs/demo-server-all.jar", "/app/demo-server-all.jar")

    defaultCommand("java", "-Xdebug", "-Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=5005", "-jar", "/app/demo-server-all.jar")

    // Read in secrets and set them as environment variables.
    // NB: This is for demo purposes only. Production systems should manage and set secrets in a secure way.
    def secretsFile = file(Paths.get(System.getProperty('user.home')).resolve('.gradle/dataportability.secrets.properties'))
    if (secretsFile.exists()) {
        def props = new Properties()
        secretsFile.withInputStream { props.load(it) }
        props.each { k, v -> environmentVariable(k, v) }
    }
}

task createClientDockerfile(type: Dockerfile) {
    description = 'Builds the Client Dockerfile'
    group = 'docker'
    destFile project.file("${buildDir}/client/Dockerfile")
    from "nginx"
    exposePort 3000
    copyFile("src/config/client/nginx.conf", "/etc/nginx")
    copyFile("build/webapp/html", "/usr/share/nginx/html")
    copyFile("build/webapp/test-keys/server.crt", "/etc/ssl/certs")
    copyFile("build/webapp/test-keys/server.key", "/etc/ssl")
}

task buildDemoServerImage(type: DockerBuildImage) {
    description = 'Builds the API Server Docker image'
    dependsOn shadowJar, createDemoServerDockerfile
    dockerFile = project.file("${buildDir}/demoserver/Dockerfile")
    inputDir = project.file(".")
    tag = 'dataportability/demoserver:latest'
}

task copyWebApp {
    dependsOn ":client:buildWebApp"
    doLast {
        group = 'docker'
        // The static webapp must be copied since Docker requires included files to be in a subdirectory relative to where Docker is executed
        copy {
            from '../../client/build/resources'
            into 'build/webapp/html'
        }
        copy {
            from '../../client/src/test-keys/server.crt'
            into 'build/webapp/test-keys'
        }
        copy {
            from '../../client/src/test-keys/server.key'
            into 'build/webapp/test-keys'
        }
    }
}

task buildClientImage(type: DockerBuildImage) {
    description = 'Builds the Client Docker image'
    dependsOn shadowJar, createClientDockerfile, copyWebApp
    dockerFile = project.file("${buildDir}/client/Dockerfile")
    inputDir = project.file(".")
    tag = 'dataportability/client:latest'
}

task dockerize {
    description = 'Builds the Client and API Server Docker images'
    group = 'docker'
    dependsOn buildDemoServerImage, buildClientImage
}

task installToolsAndDockerize {
    description = 'Installs required build tools and builds the Client and API Server Docker images'
    group = 'docker'
    dependsOn ":client:installTools", buildDemoServerImage, buildClientImage
}


