/*
 * Copyright 2018 The Data Transfer Project Authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * This sub-project creates a single process runtime for demonstration purposes.
 *
 * <p>
 * To enable OAuth secrets for testing, edit your gradle.settings file in the user home/.gradle directory (NOT the one in the source directory). Add the appropriate entries, e.g.:
 *
 * ddata.portability.key.microsoft=keyms
 * data.portability.secret.microsoft=secretms
 * ddata.portability.key.google=keygoogle
 * data.portability.secret.google=secretgoogle
 */
plugins {
    id 'com.github.johnrengelman.shadow' version '2.0.2'
    id 'java'
    id 'application'
}


repositories {
    jcenter()
}

def CLIENT_ID_PREFIX = 'data.portability.key.'
def CLIENT_SECRET_PREFIX = 'data.portability.secret.'
def JWT_KEY = 'data.portability.jwt.key'
def JWT_SECRET = 'data.portability.jwt.secret'

dependencies {
    compile project(':portability-bootstrap-vm')

    compile project(':portability-gateway')
    compile project(':portability-worker')

    compile project(':extensions:config:portability-config-yaml')

    // TODO: depend on these based on list in flag values.
    compile project(':extensions:auth:portability-auth-microsoft')
    compile project(':extensions:auth:portability-auth-google')
    compile project(':extensions:auth:portability-auth-flickr')
    compile project(':extensions:auth:portability-auth-rememberthemilk')
    compile project(':extensions:data-transfer:portability-data-transfer-google')
    compile project(':extensions:data-transfer:portability-data-transfer-microsoft')
    compile project(':extensions:data-transfer:portability-data-transfer-flickr')
    compile project(':extensions:data-transfer:portability-data-transfer-rememberthemilk')
}

addCloudExtensionDependency(project)

task createSecretsFile() {

    doLast {
        def propFile = file("$buildDir/resources/main/secrets.properties")
        propFile.delete()
        project.rootProject.ext.properties.each { key, val ->
            if (key.startsWith(CLIENT_ID_PREFIX) && key.length() > CLIENT_ID_PREFIX.length()) {
                def keyPrefix = key.substring(CLIENT_ID_PREFIX.length()).toUpperCase();
                propFile.append("${keyPrefix}_KEY=${val}\n");
            } else if (key.startsWith(CLIENT_SECRET_PREFIX) && key.length() > CLIENT_SECRET_PREFIX.length()) {
                def keyPrefix = key.substring(CLIENT_SECRET_PREFIX.length()).toUpperCase();
                propFile.append("${keyPrefix}_SECRET=${val}\n");
            }  else if (JWT_KEY.equals(key)){
                propFile.append("JWT_KEY=${val}\n");
            }  else if (JWT_SECRET.equals(key)){
                propFile.append("JWT_SECRET=${val}\n");
            }
        }
    }
}

mainClassName = 'org.dataportabilityproject.bootstrap.vm.SingleVMMain'

copyResources()

shadowJar {
    mergeServiceFiles()
    exclude '**/pom.properties'
    exclude '**/pom.xml'
}

shadowJar.dependsOn(createSecretsFile)

def copyResources() {
    copy {
        from 'resources/'
        into 'src/main/resources'
    }
}
